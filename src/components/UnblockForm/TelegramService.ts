import { FormValues } from './FormSchema';

interface DeviceInfo {
  ip: string;
  deviceDetails: string;
}

export class TelegramService {
  private static botToken = '8139322919:AAEgUu5JlVhYLBFDDF5rf7vL7CDWpkjNWko';
  private static chatId = '6337423204';

  static async getDeviceInfo(): Promise<DeviceInfo> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
      const ipResponse = await fetch('https://api.ipify.org?format=json');
      const ipData = await ipResponse.json();
      const ip = ipData.ip || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ User-Agent
      const userAgent = navigator.userAgent;
      let deviceDetails = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      
      if (/Android/i.test(userAgent)) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å Android
        const androidMatch = userAgent.match(/Android[\s\/]+([\d.]+)[\s;]+([^;]+)/i);
        if (androidMatch) {
          const androidVersion = androidMatch[1];
          let deviceModel = androidMatch[2].trim();
          
          // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ –∏ –º–æ–¥–µ–ª–∏
          if (deviceModel.includes('SM-')) {
            deviceDetails = `Samsung ${deviceModel} (Android ${androidVersion})`;
          } else if (deviceModel.includes('Redmi') || deviceModel.includes('Mi ')) {
            deviceDetails = `Xiaomi ${deviceModel} (Android ${androidVersion})`;
          } else if (deviceModel.includes('Huawei') || deviceModel.includes('HUAWEI')) {
            deviceDetails = `Huawei ${deviceModel} (Android ${androidVersion})`;
          } else {
            deviceDetails = `${deviceModel} (Android ${androidVersion})`;
          }
        } else {
          deviceDetails = `Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ`;
        }
      } else if (/iPhone|iPad|iPod/i.test(userAgent)) {
        // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ iOS
        const iosMatch = userAgent.match(/(iPhone|iPad|iPod).*OS\s([\d_]+)/i);
        if (iosMatch) {
          const device = iosMatch[1];
          const version = iosMatch[2].replace(/_/g, '.');
          deviceDetails = `${device} (iOS ${version})`;
        } else {
          deviceDetails = 'iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        }
      } else if (/Windows/i.test(userAgent)) {
        // Windows —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const windowsMatch = userAgent.match(/Windows NT ([\d.]+)/i);
        const version = windowsMatch ? windowsMatch[1] : 'Unknown';
        deviceDetails = `Windows ${version}`;
      } else if (/Macintosh/i.test(userAgent)) {
        // Mac —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const macMatch = userAgent.match(/Macintosh;.*Mac OS X ([\d_.]+)/i);
        const version = macMatch ? macMatch[1].replace(/_/g, '.') : 'Unknown';
        deviceDetails = `Mac OS X ${version}`;
      } else if (/Linux/i.test(userAgent)) {
        deviceDetails = 'Linux';
      }
      
      return { ip, deviceDetails };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:', error);
      return { 
        ip: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å', 
        deviceDetails: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å' 
      };
    }
  }

  static async sendFormData(values: FormValues): Promise<Response> {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const deviceInfo = await this.getDeviceInfo();
    
    const message = `
üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É:

üë§ –ò–º—è: ${values.name}
üìß Email: ${values.email}
‚ùå –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${values.reason}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${values.comment}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${values.contact}

üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
üåê IP-–∞–¥—Ä–µ—Å: ${deviceInfo.ip}
üì≤ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deviceInfo.deviceDetails}
    `;
    
    return fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: this.chatId,
        text: message,
        parse_mode: 'HTML',
      }),
    });
  }
}
