import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { toast } from '@/components/ui/use-toast';
import { Toaster } from '@/components/ui/toaster';
import ScrollFadeSection from './ScrollFadeSection';

const formSchema = z.object({
  email: z.string().email({ message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email-–∞–¥—Ä–µ—Å' }),
  name: z.string().min(2, { message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' }),
  reason: z.string().min(5, { message: '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏' }),
  comment: z.string().min(10, { message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤' }),
  contact: z.string().min(3, { message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏' }),
});

type FormValues = z.infer<typeof formSchema>;

const UnblockForm: React.FC = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: '',
      name: '',
      reason: '',
      comment: '',
      contact: '',
    },
  });

  const onSubmit = async (values: FormValues) => {
    setIsSubmitting(true);
    
    try {
      const botToken = '8139322919:AAEgUu5JlVhYLBFDDF5rf7vL7CDWpkjNWko';
      const chatId = '6337423204';
      
      const message = `
üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É:

üë§ –ò–º—è: ${values.name}
üìß Email: ${values.email}
‚ùå –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${values.reason}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${values.comment}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${values.contact}
      `;
      
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
      }
      
      toast({
        title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      });
      
      form.reset();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <section id="unblock-form" className="py-20 bg-gradient-to-b from-background to-purple-50">
      <div className="container mx-auto px-4">
        <ScrollFadeSection>
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">
              –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É <span className="emoji-bounce inline-block">üìù</span>
            </h2>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
            </p>
          </div>
        </ScrollFadeSection>

        <div className="max-w-2xl mx-auto">
          <ScrollFadeSection delay={100}>
            <div className="bg-card rounded-xl p-6 shadow-lg border border-primary/10">
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="example@mail.ru" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>–ò–º—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <FormField
                    control={form.control}
                    name="reason"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="–£–∫–∞–∂–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏" 
                            {...field} 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="comment"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –º–æ–≥–ª–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ. –¢–∞–∫–∂–µ —É—Ç–æ—á–Ω–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –±—ã–ª–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–º–µ–Ω—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏" 
                            className="min-h-[120px]" 
                            {...field} 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="contact"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram/WhatsApp –¥–ª—è —Å–≤—è–∑–∏" 
                            {...field} 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <Button 
                    type="submit" 
                    className="w-full pulse-soft"
                    size="lg"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <>–û—Ç–ø—Ä–∞–≤–∫–∞...</>
                    ) : (
                      <>
                        <span className="mr-2 emoji-bounce">üöÄ</span>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                      </>
                    )}
                  </Button>
                </form>
              </Form>
            </div>
          </ScrollFadeSection>
        </div>
      </div>
      <Toaster />
    </section>
  );
};

export default UnblockForm;